{
  "Comment": "A description of my state machine",
  "StartAt": "Run Reports",
  "States": {
    "Run Reports": {
      "Type": "Parallel",
      "Next": "Send Report To Slack",
      "ResultPath": "$.stats",
      "Branches": [
        {
          "StartAt": "Get View Totals Record",
          "States": {
            "Get View Totals Record": {
              "Type": "Task",
              "Resource": "${DynamoDBGetItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Key": {
                  "pk": {
                    "S": "metrics"
                  },
                  "sk": {
                    "S": "views"
                  }
                }
              },
              "Next": "Get Last View Total",
              "ResultPath": "$.totals"
            },
            "Get Last View Total": {
              "Type": "Task",
              "Parameters": {
                "TableName": "${SwagTable}",
                "KeyConditionExpression": "pk = :pk and begins_with(sk, :sk)",
                "ScanIndexForward": false,
                "Limit": 1,
                "ExpressionAttributeValues": {
                  ":pk": {
                    "S": "report"
                  },
                  ":sk": {
                    "S": "views"
                  }
                }
              },
              "Resource": "${DynamoDBQuery}",
              "Next": "Calculate Views Since Last Run",
              "ResultPath": "$.lastRun"
            },
            "Calculate Views Since Last Run": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${GetDailyValuesFunction}",
                "Payload": {
                  "totals.$": "$.totals.Item",
                  "lastRun.$": "$.lastRun.Items[0]",
                  "reportType": "views",
                  "top": 10
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Search Totals Record",
          "States": {
            "Get Search Totals Record": {
              "Type": "Task",
              "Resource": "${DynamoDBGetItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Key": {
                  "pk": {
                    "S": "metrics"
                  },
                  "sk": {
                    "S": "search"
                  }
                }
              },
              "ResultPath": "$.totals",
              "Next": "Get Last Search Total"
            },
            "Get Last Search Total": {
              "Type": "Task",
              "Parameters": {
                "TableName": "${SwagTable}",
                "KeyConditionExpression": "pk = :pk and begins_with(sk, :sk)",
                "ScanIndexForward": false,
                "Limit": 1,
                "ExpressionAttributeValues": {
                  ":pk": {
                    "S": "report"
                  },
                  ":sk": {
                    "S": "search"
                  }
                }
              },
              "Resource": "${DynamoDBQuery}",
              "ResultPath": "$.lastRun",
              "Next": "Calculate Searches Since Last Run"
            },
            "Calculate Searches Since Last Run": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${GetDailyValuesFunction}",
                "Payload": {
                  "totals.$": "$.totals.Item",
                  "lastRun.$": "$.lastRun.Items[0]",
                  "reportType": "search",
                  "top": 10
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Upload Totals Record",
          "States": {
            "Get Upload Totals Record": {
              "Type": "Task",
              "Resource": "${DynamoDBGetItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Key": {
                  "pk": {
                    "S": "metrics"
                  },
                  "sk": {
                    "S": "uploads"
                  }
                }
              },
              "ResultPath": "$.totals",
              "Next": "Get Last Upload Total"
            },
            "Get Last Upload Total": {
              "Type": "Task",
              "Parameters": {
                "TableName": "${SwagTable}",
                "KeyConditionExpression": "pk = :pk and begins_with(sk, :sk)",
                "ScanIndexForward": false,
                "Limit": 1,
                "ExpressionAttributeValues": {
                  ":pk": {
                    "S": "report"
                  },
                  ":sk": {
                    "S": "uploads"
                  }
                }
              },
              "Resource": "${DynamoDBQuery}",
              "ResultPath": "$.lastRun",
              "Next": "Calculate Uploads Since Last Run"
            },
            "Calculate Uploads Since Last Run": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${GetDailyValuesFunction}",
                "Payload": {
                  "totals.$": "$.totals.Item",
                  "lastRun.$": "$.lastRun.Items[0]",
                  "reportType": "uploads",
                  "top": 10
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Voting Totals Record",
          "States": {
            "Get Voting Totals Record": {
              "Type": "Task",
              "Resource": "${DynamoDBGetItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Key": {
                  "pk": {
                    "S": "metrics"
                  },
                  "sk": {
                    "S": "voting"
                  }
                }
              },
              "ResultPath": "$.totals",
              "Next": "Get Last Voting Total"
            },
            "Get Last Voting Total": {
              "Type": "Task",
              "Parameters": {
                "TableName": "${SwagTable}",
                "KeyConditionExpression": "pk = :pk and begins_with(sk, :sk)",
                "ScanIndexForward": false,
                "Limit": 1,
                "ExpressionAttributeValues": {
                  ":pk": {
                    "S": "report"
                  },
                  ":sk": {
                    "S": "voting"
                  }
                }
              },
              "Resource": "${DynamoDBQuery}",
              "ResultPath": "$.lastRun",
              "Next": "Calculate Voting Since Last Run"
            },
            "Calculate Voting Since Last Run": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${GetDailyValuesFunction}",
                "Payload": {
                  "totals.$": "$.totals.Item",
                  "lastRun.$": "$.lastRun.Items[0]",
                  "reportType": "voting",
                  "top": 10
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      ]
    },
    "Send Report To Slack": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "${SendReportToSlackFunction}",
        "Payload": {
          "views.$": "$.stats[0].top",
          "search.$": "$.stats[1].top",
          "upvotes.$": "$.stats[3].top",
          "uploads.$": "$.stats[2].top"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "End": true
    }
  }
}
