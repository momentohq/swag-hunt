{
  "Comment": "State machine that moderates and classifies incoming images",
  "StartAt": "Moderate and Get Detail",
  "States": {
    "Moderate and Get Detail": {
      "Type": "Parallel",
      "Next": "Had to Downscale?",
      "Branches": [
        {
          "StartAt": "Moderate Photo",
          "States": {
            "Moderate Photo": {
              "Type": "Task",
              "Parameters": {
                "Image": {
                  "S3Object": {
                    "Bucket": "${SwagBucket}",
                    "Name.$": "$.detail.object.key"
                  }
                }
              },
              "Resource": "${DetectModerationLabels}",
              "End": true,
              "Catch": [
                {
                  "ErrorEquals": [
                    "Rekognition.ImageTooLargeException"
                  ],
                  "Next": "Downscale Photo",
                  "ResultPath": null
                }
              ]
            },
            "Downscale Photo": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${DownscalePhotoFunction}",
                "Payload": {
                  "key.$": "$$.Execution.Input.detail.object.key"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Photo Metadata",
          "States": {
            "Get Photo Metadata": {
              "Type": "Task",
              "Parameters": {
                "Bucket": "${SwagBucket}",
                "Key.$": "$$.Execution.Input.detail.object.key"
              },
              "Resource": "${S3HeadObject}",
              "Next": "Save Image Record"
            },
            "Save Image Record": {
              "Type": "Task",
              "Resource": "${DynamoDBPutItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Item": {
                  "pk": {
                    "S.$": "$.Metadata.referencenumber"
                  },
                  "sk": {
                    "S": "image"
                  },
                  "status": {
                    "S": "Processing"
                  },
                  "lock": {
                    "M": {
                      "executionId": {
                        "S.$": "$$.Execution.Id"
                      },
                      "startTime": {
                        "S.$": "$$.Execution.StartTime"
                      }
                    }
                  }
                }
              },
              "ResultPath": null,
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.imageDetail"
    },
    "Check For Inappropriate Content": {
      "Type": "Pass",
      "Parameters": {
        "moderationLabelCount.$": "States.ArrayLength($.imageDetail[0].ModerationLabels)",
        "imageData.$": "$.imageDetail[1].Metadata"
      },
      "Next": "Has Inappropriate Content?"
    },
    "Has Inappropriate Content?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.moderationLabelCount",
          "NumericGreaterThan": 0,
          "Next": "Cleanup and Notify User"
        }
      ],
      "Default": "Detect Swag Labels"
    },
    "Detect Swag Labels": {
      "Type": "Task",
      "Parameters": {
        "Image": {
          "S3Object": {
            "Bucket": "${SwagBucket}",
            "Name.$": "$$.Execution.Input.detail.object.key"
          }
        }
      },
      "Resource": "${DetectLabels}",
      "Next": "Process Labels",
      "ResultPath": "$.detected"
    },
    "Process Labels": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${ProcessImageLabelsFunction}",
        "Payload": {
          "labels.$": "$.detected.Labels"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Notify and Start Post Processing",
      "ResultPath": "$.processedLabels"
    },
    "Notify and Start Post Processing": {
      "Type": "Parallel",
      "Next": "Success",
      "Branches": [
        {
          "StartAt": "Build Success Message",
          "States": {
            "Build Success Message": {
              "Type": "Pass",
              "Parameters": {
                "topicName.$": "$.imageData.referencenumber",
                "message": {
                  "result": "Succeeded",
                  "tags.$": "$.processedLabels.Payload.tags"
                }
              },
              "Next": "Send Success Message"
            },
            "Send Success Message": {
              "Type": "Task",
              "Resource": "${EventBridgePutEvents}",
              "Parameters": {
                "Entries": [
                  {
                    "Detail": {
                      "cacheName": "reinvent",
                      "topicName.$": "$.topicName",
                      "message.$": "States.Base64Encode(States.JsonToString($.message))"
                    },
                    "DetailType": "topicPublish",
                    "Source": "ProcessSwagStateMachine"
                  }
                ]
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Start Post Processing (Async)",
          "States": {
            "Start Post Processing (Async)": {
              "Type": "Task",
              "Resource": "${StepFunctionsStartExecution}",
              "Parameters": {
                "StateMachineArn": "${PostProcessingStateMachine}",
                "Input": {
                  "labels.$": "$.processedLabels.Payload.labels",
                  "referenceNumber.$": "$.imageData.referencenumber",
                  "originalKey.$": "$$.Execution.Input.detail.object.key",
                  "lockStartTime.$": "$$.Execution.StartTime",
                  "uploadMetadata.$": "$.imageData",
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                }
              },
              "End": true
            }
          }
        }
      ]
    },
    "Cleanup and Notify User": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Delete Inappropriate Object",
          "States": {
            "Delete Inappropriate Object": {
              "Type": "Task",
              "Parameters": {
                "Bucket": "${SwagBucket}",
                "Key.$": "$$.Execution.Input.detail.object.key"
              },
              "Resource": "${S3DeleteObject}",
              "ResultPath": null,
              "End": true
            }
          }
        },
        {
          "StartAt": "Build Failure Message",
          "States": {
            "Build Failure Message": {
              "Type": "Pass",
              "Next": "Send Inappropriate Image Message",
              "Parameters": {
                "topicName.$": "$.imageData.referencenumber",
                "message": {
                  "result": "Rejected",
                  "message": "The provided image is not appropriate"
                }
              }
            },
            "Send Inappropriate Image Message": {
              "Type": "Task",
              "Resource": "${EventBridgePutEvents}",
              "Parameters": {
                "Entries": [
                  {
                    "Detail": {
                      "cacheName": "reinvent",
                      "topicName.$": "$.topicName",
                      "message.$": "States.Base64Encode(States.JsonToString($.message))"
                    },
                    "DetailType": "topicPublish",
                    "Source": "ProcessSwagStateMachine"
                  }
                ]
              },
              "End": true
            }
          }
        }
      ],
      "Next": "Update Status to Failed",
      "ResultPath": null
    },
    "Update Status to Failed": {
      "Type": "Task",
      "Resource": "${DynamoDBUpdateItem}",
      "Parameters": {
        "TableName": "${SwagTable}",
        "Key": {
          "pk": {
            "S.$": "$.imageData.referencenumber"
          },
          "sk": {
            "S": "image"
          }
        },
        "UpdateExpression": "SET #status = :failed",
        "ConditionExpression": "#lock.#startTime <= :startTime",
        "ExpressionAttributeNames": {
          "#status": "status",
          "#lock": "lock",
          "#startTime": "startTime"
        },
        "ExpressionAttributeValues": {
          ":failed": {
            "S": "Failed"
          },
          ":executionId": {
            "S.$": "$$.Execution.StartTime"
          }
        }
      },
      "Next": "Fail",
      "ResultPath": null,
      "Catch": [
        {
          "ErrorEquals": [
            "DynamoDB.ConditionalCheckFailedException"
          ],
          "Next": "Newer Execution is Running"
        }
      ]
    },
    "Newer Execution is Running": {
      "Type": "Succeed"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Had to Downscale?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.imageDetail[0].downscale_success",
              "IsPresent": true
            },
            {
              "Variable": "$.imageDetail[0].downscale_success",
              "BooleanEquals": true
            }
          ],
          "Next": "Success"
        },
        {
          "And": [
            {
              "Variable": "$.imageDetail[0].downscale_success",
              "IsPresent": true
            },
            {
              "Variable": "$.imageDetail[0].downscale_success",
              "BooleanEquals": false
            }
          ],
          "Next": "Format Invalid Photo Message"
        }
      ],
      "Default": "Check For Inappropriate Content"
    },
    "Format Invalid Photo Message": {
      "Type": "Pass",
      "Parameters": {
        "topicName.$": "$.imageDetail[1].Metadata.referencenumber",
        "message": {
          "result": "Rejected",
          "message": "Could not process photo. Please choose a different one."
        }
      },
      "Next": "Send Failure Message"
    },
    "Send Failure Message": {
      "Type": "Task",
      "Resource": "${EventBridgePutEvents}",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "cacheName": "reinvent",
              "topicName.$": "$.topicName",
              "message.$": "States.Base64Encode(States.JsonToString($.message))"
            },
            "DetailType": "topicPublish",
            "Source": "ProcessSwagStateMachine"
          }
        ]
      },
      "Next": "Update Status to Failed"
    }
  }
}
