{
  "Comment": "Updates a piece of swag",
  "StartAt": "Get Swag",
  "States": {
    "Get Swag": {
      "Type": "Task",
      "Resource": "${DynamoDBGetItem}",
      "Parameters": {
        "TableName": "${SwagTable}",
        "Key": {
          "pk": {
            "S.$": "States.Format('{}#{}', $.from, $.type)"
          },
          "sk": {
            "S": "swag"
          }
        }
      },
      "Next": "Does Swag Exist?"
    },
    "Does Swag Exist?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Item",
          "IsPresent": true,
          "Next": "Is The Type or Vendor Changing?"
        }
      ],
      "Default": "Swag Not Found"
    },
    "Is The Type or Vendor Changing?": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Not": {
                "Variable": "$.Item.from.S",
                "StringEqualsPath": "$$.Execution.Input.newFrom"
              }
            },
            {
              "Not": {
                "Variable": "$.Item.swagType.S",
                "StringEqualsPath": "$$.Execution.Input.newType"
              }
            }
          ],
          "Next": "Update New and Old Records"
        }
      ],
      "Default": "Success"
    },
    "Update New and Old Records": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get Additional Images",
          "States": {
            "Get Additional Images": {
              "Type": "Task",
              "Parameters": {
                "TableName": "${SwagTable}",
                "KeyConditionExpression": "pk = :pk and begins_with(sk, :sk)",
                "ExpressionAttributeValues": {
                  ":pk": {
                    "S.$": "States.Format('{}#{}', $$.Execution.Input.from, $$.Execution.Input.type)"
                  },
                  ":sk": {
                    "S": "additionalImage#"
                  }
                },
                "Limit": 1
              },
              "Resource": "${DynamoDBQuery}",
              "ResultPath": "$.additional",
              "Next": "Has Additional Images?"
            },
            "Has Additional Images?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.additional.Count",
                  "NumericGreaterThan": 0,
                  "Next": "Update Linked Records"
                }
              ],
              "Default": "Remove Old Swag"
            },
            "Update Linked Records": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Update Original Swag Record",
                  "States": {
                    "Update Original Swag Record": {
                      "Type": "Task",
                      "Resource": "${DynamoDBUpdateItem}",
                      "Parameters": {
                        "TableName": "${SwagTable}",
                        "Key": {
                          "pk": {
                            "S.$": "States.Format('{}#{}', $$.Execution.Input.from, $$.Execution.Input.type)"
                          },
                          "sk": {
                            "S": "swag"
                          }
                        },
                        "UpdateExpression": "SET #url = :url, etag = :etag",
                        "ExpressionAttributeNames": {
                          "#url": "url"
                        },
                        "ExpressionAttributeValues": {
                          ":url": {
                            "S.$": "$.additional.Items[0].url.S"
                          },
                          ":etag": {
                            "S.$": "$$.State.EnteredTime"
                          }
                        }
                      },
                      "Next": "Update Momento Vector Index",
                      "ResultPath": null
                    },
                    "Update Momento Vector Index": {
                      "Type": "Task",
                      "Resource": "${LambdaInvoke}",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "FunctionName": "${AddToMVIFunction}",
                        "Payload": {
                          "swag": {
                            "pk.$": "$.additional.Items[0].pk.S",
                            "from.$": "$$.Execution.Input.from",
                            "swagType.$": "$$.Execution.Input.newType",
                            "url.$": "$.additional.Items[0].url.S",
                            "tags.$": "$$.Execution.Input.tags"
                          }
                        }
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Delete First Additional Image",
                  "States": {
                    "Delete First Additional Image": {
                      "Type": "Task",
                      "Resource": "${DynamoDBDeleteItem}",
                      "Parameters": {
                        "TableName": "${SwagTable}",
                        "Key": {
                          "pk": {
                            "S.$": "$.additional.Items[0].pk.S"
                          },
                          "sk": {
                            "S.$": "$.additional.Items[0].sk.S"
                          }
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            },
            "Remove Old Swag": {
              "Type": "Parallel",
              "End": true,
              "Branches": [
                {
                  "StartAt": "Delete Embedding From MVI",
                  "States": {
                    "Delete Embedding From MVI": {
                      "Type": "Task",
                      "Resource": "${LambdaInvoke}",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload": {
                          "id.$": "States.Format('{}#{}', $$.Execution.Input.from, $$.Execution.Input.type)"
                        },
                        "FunctionName": "${RemoveEmbeddingFunction}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Delete Swag Record",
                  "States": {
                    "Delete Swag Record": {
                      "Type": "Task",
                      "Resource": "${DynamoDBDeleteItem}",
                      "Parameters": {
                        "TableName": "${SwagTable}",
                        "Key": {
                          "pk": {
                            "S.$": "States.Format('{}#{}', $$.Execution.Input.from, $$.Execution.Input.type)"
                          },
                          "sk": {
                            "S": "swag"
                          }
                        }
                      },
                      "End": true
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "StartAt": "Get Existing New Swag",
          "States": {
            "Get Existing New Swag": {
              "Type": "Task",
              "Resource": "${DynamoDBGetItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Key": {
                  "pk": {
                    "S.$": "States.Format('{}#{}', $$.Execution.Input.newFrom, $$.Execution.Input.newType)"
                  },
                  "sk": {
                    "S": "swag"
                  }
                }
              },
              "Next": "Does New Swag Exist?"
            },
            "Does New Swag Exist?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Item",
                  "IsPresent": true,
                  "Next": "Add Additional Item Record"
                }
              ],
              "Default": "Create New Swag Item"
            },
            "Create New Swag Item": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${SaveSwagFunction}",
                "Payload": {
                  "input.$": "$$.Execution.Input",
                  "url.$": "$$.Execution.Input.url",
                  "overrides": {
                    "type.$": "$$.Execution.Input.newType",
                    "from.$": "$$.Execution.Input.newFrom"
                  }
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Add to Momento Vector Index"
            },
            "Add Additional Item Record": {
              "Type": "Task",
              "Resource": "${DynamoDBPutItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Item": {
                  "pk": {
                    "S.$": "States.Format('{}#{}', $$.Execution.Input.newFrom, $$.Execution.Input.newType)"
                  },
                  "sk": {
                    "S.$": "States.Format('additionalImage#{}', $$.Execution.Id)"
                  },
                  "url": {
                    "S.$": "$$.Execution.Input.url"
                  }
                }
              },
              "Next": "Update Main Swag Record ETag"
            },
            "Update Main Swag Record ETag": {
              "Type": "Task",
              "Resource": "${DynamoDBUpdateItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Key": {
                  "pk": {
                    "S.$": "States.Format('{}#{}', $$.Execution.Input.newFrom, $$.Execution.Input.newType)"
                  },
                  "sk": {
                    "S": "swag"
                  }
                },
                "UpdateExpression": "SET etag = :etag",
                "ExpressionAttributeValues": {
                  ":etag": {
                    "S.$": "$$.State.EnteredTime"
                  }
                }
              },
              "End": true
            },
            "Add to Momento Vector Index": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${AddToMVIFunction}",
                "Payload": {
                  "swag": {
                    "pk.$": "States.Format('{}#{}', $$.Execution.Input.newFrom, $$.Execution.Input.newType)",
                    "from.$": "$$.Execution.Input.newFrom",
                    "swagType.$": "$$.Execution.Input.newType",
                    "url.$": "$$.Execution.Input.url",
                    "tags.$": "$$.Execution.Input.tags"
                  }
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      ],
      "End": true
    },
    "Success": {
      "Type": "Succeed"
    },
    "Swag Not Found": {
      "Type": "Fail",
      "Error": "SwagNotFound"
    }
  }
}
