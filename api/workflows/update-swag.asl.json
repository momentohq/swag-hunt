{
  "Comment": "Updates a piece of swag",
  "StartAt": "Get Swag",
  "States": {
    "Get Swag": {
      "Type": "Task",
      "Resource": "${DynamoDBGetItem}",
      "Parameters": {
        "TableName": "${SwagTable}",
        "Key": {
          "pk": {
            "S.$": "States.Format('{}#{}', $.from, $.type)"
          },
          "sk": {
            "S": "swag"
          }
        }
      },
      "Next": "Does Swag Exist?"
    },
    "Does Swag Exist?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Item",
          "IsPresent": true,
          "Next": "Is The Type or Vendor Changing?"
        }
      ],
      "Default": "Swag Not Found"
    },
    "Is The Type or Vendor Changing?": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Not": {
                "Variable": "$.Item.from.S",
                "StringEqualsPath": "$$.Execution.Input.newFrom"
              }
            },
            {
              "Not": {
                "Variable": "$.Item.swagType.S",
                "StringEqualsPath": "$$.Execution.Input.newType"
              }
            }
          ],
          "Next": "Update New and Old Records"
        }
      ],
      "Default": "Success"
    },
    "Update New and Old Records": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Adjust Additional Swag Records",
          "States": {
            "Adjust Additional Swag Records": {
              "Type": "Task",
              "Resource": "${StepFunctionsStartExecution}",
              "Parameters": {
                "StateMachineArn": "${AdjustAltSwagStateMachine}",
                "Input": {
                  "from.$": "$$.Execution.Input.from",
                  "type.$": "$$.Execution.Input.type",
                  "tags.$": "$$.Execution.Input.tags",
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Existing New Swag",
          "States": {
            "Get Existing New Swag": {
              "Type": "Task",
              "Resource": "${DynamoDBGetItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Key": {
                  "pk": {
                    "S.$": "States.Format('{}#{}', $$.Execution.Input.newFrom, $$.Execution.Input.newType)"
                  },
                  "sk": {
                    "S": "swag"
                  }
                }
              },
              "Next": "Does New Swag Exist?"
            },
            "Does New Swag Exist?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Item",
                  "IsPresent": true,
                  "Next": "Add Additional Item Record"
                }
              ],
              "Default": "Create New Swag Item"
            },
            "Create New Swag Item": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${SaveSwagFunction}",
                "Payload": {
                  "input.$": "$$.Execution.Input",
                  "url.$": "$$.Execution.Input.url",
                  "overrides": {
                    "type.$": "$$.Execution.Input.newType",
                    "from.$": "$$.Execution.Input.newFrom"
                  }
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Add to Momento Vector Index"
            },
            "Add Additional Item Record": {
              "Type": "Task",
              "Resource": "${DynamoDBPutItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Item": {
                  "pk": {
                    "S.$": "States.Format('{}#{}', $$.Execution.Input.newFrom, $$.Execution.Input.newType)"
                  },
                  "sk": {
                    "S.$": "States.Format('additionalImage#{}', $$.Execution.Id)"
                  },
                  "url": {
                    "S.$": "$$.Execution.Input.url"
                  }
                }
              },
              "Next": "Update Main Swag Record ETag"
            },
            "Update Main Swag Record ETag": {
              "Type": "Task",
              "Resource": "${DynamoDBUpdateItem}",
              "Parameters": {
                "TableName": "${SwagTable}",
                "Key": {
                  "pk": {
                    "S.$": "States.Format('{}#{}', $$.Execution.Input.newFrom, $$.Execution.Input.newType)"
                  },
                  "sk": {
                    "S": "swag"
                  }
                },
                "UpdateExpression": "SET etag = :etag",
                "ExpressionAttributeValues": {
                  ":etag": {
                    "S.$": "$$.State.EnteredTime"
                  }
                }
              },
              "End": true
            },
            "Add to Momento Vector Index": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${AddToMVIFunction}",
                "Payload": {
                  "swag": {
                    "pk.$": "States.Format('{}#{}', $$.Execution.Input.newFrom, $$.Execution.Input.newType)",
                    "from.$": "$$.Execution.Input.newFrom",
                    "swagType.$": "$$.Execution.Input.newType",
                    "url.$": "$$.Execution.Input.url",
                    "tags.$": "$$.Execution.Input.tags"
                  }
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      ],
      "End": true
    },
    "Success": {
      "Type": "Succeed"
    },
    "Swag Not Found": {
      "Type": "Fail",
      "Error": "SwagNotFound"
    }
  }
}
