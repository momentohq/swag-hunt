AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Service for swag hunt

Parameters:
  MomentoApiKey:
    Type: String
    NoEcho: true
    Default: ''
  DefaultCache:
    Type: String
    Default: reinvent
  CORSOrigin:
    Type: String
    Default: '*'
  HostedZoneId:
    Type: String
  AdminOverrideKey:
    Type: String

Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 3
    MemorySize: 2048
    Handler: index.handler
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        CORS_ORIGIN: !Ref CORSOrigin
  Api:
    Cors:
      AllowMethods: "'POST,GET,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,x-momento-admin-override'"
      AllowOrigin: "'*'"

Resources:
  SwagTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: sort
          AttributeType: N
      GlobalSecondaryIndexes:
        - IndexName: types
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: sort
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  SwagBucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - https://swaghunt.io
              - https://www.swaghunt.io
              - http://localhost:3000
              - https://assets.swaghunt.io
            AllowedMethods:
              - PUT
              - GET
            AllowedHeaders:
              - '*'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  SwagCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: SwagBucketOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 86400
        Origins:
          - Id: SwagBucketOrigin
            DomainName: !GetAtt SwagBucket.DomainName
            S3OriginConfig: {}
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref AssetCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Aliases:
          - assets.swaghunt.io

  AssetCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: assets.swaghunt.io
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: assets.swaghunt.io
          HostedZoneId: !Ref HostedZoneId

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: assets.swaghunt.io
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt SwagCloudFrontDistribution.DomainName

  SwagApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: v1
      MethodSettings:
        - MetricsEnabled: True
          ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: ERROR
          DataTraceEnabled: True
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml

  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: api.swaghunt.io
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: api.swaghunt.io
          HostedZoneId: !Ref HostedZoneId

  SwagApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: api.swaghunt.io
      CertificateArn: !Ref APICertificate

  SwagApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref SwagApiGatewayDomainName
      RestApiId: !Ref SwagApi
      Stage: v1

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: api.swaghunt.io
      Type: CNAME
      TTL: 3600
      ResourceRecords:
        - !GetAtt SwagApiGatewayDomainName.DistributionDomainName

  AddSwagFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/add-swag
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref AddSwagStateMachine
      Environment:
        Variables:
          ADD_SWAG_STATE_MACHINE: !Ref AddSwagStateMachine
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref SwagApi
            Path: /swag
            Method: POST

  UpdateSwagFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update-swag
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref UpdateSwagStateMachine
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          UPDATE_SWAG_STATE_MACHINE: !Ref UpdateSwagStateMachine
          SECRET_ID: !Ref MomentoSecret
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref SwagApi
            Path: /swag/{from}/{type}
            Method: PUT

  DeleteSwagFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete-swag
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref AdjustAltSwagStateMachine
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:DeleteItem
              Resource: !GetAtt SwagTable.Arn
      Environment:
        Variables:
          ADJUST_SWAG_STATE_MACHINE: !Ref AdjustAltSwagStateMachine
          SECRET_ID: !Ref MomentoSecret
          TABLE_NAME: !Ref SwagTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref SwagApi
            Path: /swag/{from}/{type}
            Method: DELETE

  GetSwagFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-swag
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !Sub ${SwagTable.Arn}/index/types
      Environment:
        Variables:
          TABLE_NAME: !Ref SwagTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref SwagApi
            Path: /swag
            Method: GET

  UpvoteSwagFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/upvote-swag
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt SwagTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref SwagTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref SwagApi
            Path: /swag/{from}/{type}/upvotes
            Method: POST

  CreateSwagEmbeddingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create-swag-embedding
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource: '*'
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          SECRET_ID: !Ref MomentoSecret

  RemoveEmbeddingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/remove-embedding
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          SECRET_ID: !Ref MomentoSecret

  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/search
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource: '*'
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          SECRET_ID: !Ref MomentoSecret
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref SwagApi
            Path: /swag/search
            Method: POST

  GetUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-upload-url
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${SwagBucket}/quarantine/*
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          SECRET_ID: !Ref MomentoSecret
          BUCKET_NAME: !Ref SwagBucket
          CACHE_NAME: !Ref DefaultCache
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref SwagApi
            Path: /swag/uploads
            Method: GET

  GetSwagDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-swag-detail
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !GetAtt SwagTable.Arn
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Environment:
        Variables:
          TABLE_NAME: !Ref SwagTable
          SECRET_ID: !Ref MomentoSecret
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref SwagApi
            Path: /swag/{from}/{type}
            Method: GET

  FormatPhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/format-photo
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${SwagBucket}/quarantine/*
      Layers:
        - !Ref SharpLayer
      Environment:
        Variables:
          BUCKET_NAME: !Ref SwagBucket

  ConvertHeicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/convert-heic
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${SwagBucket}/quarantine/*
      Layers:
        - !Ref SharpLayer
      Environment:
        Variables:
          BUCKET_NAME: !Ref SwagBucket

  ConvertToWebpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/convert-to-webp
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${SwagBucket}/quarantine/*
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${SwagBucket}/public/*
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MomentoSecret
      Layers:
        - !Ref SharpLayer
      Environment:
        Variables:
          BUCKET_NAME: !Ref SwagBucket
          CACHE_NAME: !Ref DefaultCache
          SECRET_ID: !Ref MomentoSecret

  ProcessImageLabelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/process-image-labels
      Policies:
        - AWSLambdaBasicExecutionRole

  SaveSwagRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/save-swag-record
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt SwagTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref SwagTable

  SharpLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sharp-layer
      Description: Sharp library for image processing
      ContentUri: layers/sharp-layer.zip
      CompatibleRuntimes:
        - nodejs14.x
        - nodejs18.x

  ProcessSwagStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: workflows/process-new-images.asl.json
      DefinitionSubstitutions:
        DetectModerationLabels: !Sub arn:${AWS::Partition}:states:::aws-sdk:rekognition:detectModerationLabels
        DetectLabels: !Sub arn:${AWS::Partition}:states:::aws-sdk:rekognition:detectLabels
        S3DeleteObject: !Sub arn:${AWS::Partition}:states:::aws-sdk:s3:deleteObject
        S3HeadObject: !Sub arn:${AWS::Partition}:states:::aws-sdk:s3:headObject
        DynamoDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DynamoDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        StepFunctionsStartExecution: !Sub arn:${AWS::Partition}:states:::states:startExecution
        PostProcessingStateMachine: !Ref PostProcessSwagStateMachine
        SwagBucket: !Ref SwagBucket
        SwagTable: !Ref SwagTable
        FormatPhotoFunction: !GetAtt FormatPhotoFunction.Arn
        ConvertHeicFunction: !GetAtt ConvertHeicFunction.Arn
        ProcessImageLabelsFunction: !GetAtt ProcessImageLabelsFunction.Arn
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - rekognition:DetectModerationLabels
                - rekognition:DetectLabels
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:DeleteObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${SwagBucket}/quarantine/*
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt FormatPhotoFunction.Arn
                - !GetAtt ProcessImageLabelsFunction.Arn
                - !GetAtt ConvertHeicFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt SwagTable.Arn
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref PostProcessSwagStateMachine
      Events:
        S3ItemUploaded:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref SwagBucket
                object:
                  key:
                    - prefix: quarantine/

  PostProcessSwagStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: workflows/post-process-images.asl.json
      DefinitionSubstitutions:
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        DynamoDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        S3DeleteObject: !Sub arn:${AWS::Partition}:states:::aws-sdk:s3:deleteObject
        S3PutObjectAcl: !Sub arn:${AWS::Partition}:states:::aws-sdk:s3:putObjectAcl
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        SwagTable: !Ref SwagTable
        SwagBucket: !Ref SwagBucket
        GetSwagTypeFunction: !GetAtt GetSwagTypeFunction.Arn
        ConvertToWebpFunction: !GetAtt ConvertToWebpFunction.Arn
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt GetSwagTypeFunction.Arn
                - !GetAtt ConvertToWebpFunction.Arn
            - Effect: Allow
              Action: s3:PutObjectAcl
              Resource: !Sub arn:${AWS::Partition}:s3:::${SwagBucket}/public/*
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource: !GetAtt SwagTable.Arn
            - Effect: Allow
              Action: s3:DeleteObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${SwagBucket}/quarantine/*
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

  AddSwagStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: workflows/add-swag.asl.json
      DefinitionSubstitutions:
        DynamoDBGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        DynamoDBDeleteItem: !Sub arn:${AWS::Partition}:states:::dynamodb:deleteItem
        DynamoDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DynamoDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        SwagTable: !Ref SwagTable
        SaveSwagFunction: !GetAtt SaveSwagRecordFunction.Arn
        AddToMVIFunction: !GetAtt CreateSwagEmbeddingFunction.Arn
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:DeleteItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt SwagTable.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt SaveSwagRecordFunction.Arn
                - !GetAtt CreateSwagEmbeddingFunction.Arn

  UpdateSwagStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: workflows/update-swag.asl.json
      DefinitionSubstitutions:
        DynamoDBGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        DynamoDBDeleteItem: !Sub arn:${AWS::Partition}:states:::dynamodb:deleteItem
        DynamoDBQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        DynamoDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        DynamoDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        SwagTable: !Ref SwagTable
        SaveSwagFunction: !GetAtt SaveSwagRecordFunction.Arn
        AddToMVIFunction: !GetAtt CreateSwagEmbeddingFunction.Arn
        RemoveEmbeddingFunction: !GetAtt RemoveEmbeddingFunction.Arn
        StepFunctionsStartExecution: !Sub arn:${AWS::Partition}:states:::states:startExecution
        AdjustAltSwagStateMachine: !Ref AdjustAltSwagStateMachine
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:PutItem
              Resource: !GetAtt SwagTable.Arn
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt SaveSwagRecordFunction.Arn
                - !GetAtt CreateSwagEmbeddingFunction.Arn
                - !GetAtt RemoveEmbeddingFunction.Arn
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref AdjustAltSwagStateMachine

  AdjustAltSwagStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: workflows/adjust-alt-swag-records.asl.json
      DefinitionSubstitutions:
        DynamoDBDeleteItem: !Sub arn:${AWS::Partition}:states:::dynamodb:deleteItem
        DynamoDBQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        DynamoDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        SwagTable: !Ref SwagTable
        AddToMVIFunction: !GetAtt CreateSwagEmbeddingFunction.Arn
        RemoveEmbeddingFunction: !GetAtt RemoveEmbeddingFunction.Arn
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource: !GetAtt SwagTable.Arn
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt CreateSwagEmbeddingFunction.Arn
                - !GetAtt RemoveEmbeddingFunction.Arn

  GetSwagTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions\ask-ai-for-swag-type
      Timeout: 30
      Policies:
        - Statement:
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource: '*'

  MomentoSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString:
        Fn::Sub:
          - |-
            {
              "momento": "${MomentoApiKey}",
              "admin": "${AdminKey}"
            }
          - MomentoApiKey: !Ref MomentoApiKey
            AdminKey: !Ref AdminOverrideKey
